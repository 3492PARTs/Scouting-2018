from flask import Flask, render_template, request, redirect, url_for, Response
from peewee import *

import models as db

app = Flask(__name__)


#valid = False
#event = -1

valid = True
event = 2

# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    if db.db.is_closed():
        db.db.connect()


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.db.is_closed():
        db.db.close()


@app.route('/', methods=['GET', 'POST'])
def index():
    events = []
    passwrd = request.form.get('pass', None)

    if passwrd == "BeanieBot3492":
        global valid
        valid = True

        event_id = request.form.get('event', None)
        global event
        event = event_id
    else:
        events = db.event.select().order_by(db.event.event_id.asc()).tuples()
        events = list(events)

    return render_template('index.html', valid=valid, events=events)


@app.route('/field')
def field():
    if valid:
        teams = db.team.select().join(db.event_team_xref, JOIN_INNER, (db.team.team_no == db.event_team_xref.team_no) & (db.event_team_xref.event == event)).order_by(db.team.team_no.asc()).tuples()
        teams = list(teams)
        return render_template('field.html', teams=teams)
    else:
        return redirect(url_for('index'))


@app.route('/field-submit', methods=['POST'])
def field_submit():
    if valid:
        name = request.form.get('name', None)
        team = request.form.get('team-no', None)
        match = request.form.get('match', None)
        auto_move = request.form.get('move-group', None)
        auto_switch_cubes = request.form.get('auto-cube-switch', None)
        auto_scale_cubes = request.form.get('auto-cube-scale', None)
        auto_comm = request.form.get('auto-comm', None)
        tele_switch_cubes = request.form.get('tele-cube-switch', None)
        tele_scale_cubes = request.form.get('tele-cube-scale', None)
        hang = request.form.get('hang', 'n')
        tele_comm = request.form.get('tele-comm', None)
        rating = request.form.get('rating', None)

        match = db.match(event=event, team_no=team, scout=name, auto_move=auto_move, auto_switch_cubes=auto_switch_cubes,
                         auto_scale_cubes=auto_scale_cubes, auto_comm=auto_comm.replace(",", "."), match_no=match,
                         tele_switch_cubes=tele_switch_cubes, tele_scale_cubes=tele_scale_cubes,
                         hang=hang, tele_comm=tele_comm.replace(",", "."), rate=rating)
        match.save()

        return redirect(url_for('field'))
    else:
        return redirect(url_for('index'))


@app.route('/download')
def download():
    if valid:
        data = db.match.select(db.match.event, db.match.team_no, db.match.scout, db.match.auto_move, db.match.auto_switch_cubes,
                               db.match.auto_scale_cubes, db.match.auto_comm, db.match.match_no, db.match.tele_switch_cubes,
                               db.match.tele_scale_cubes, db.match.hang, db.match.tele_comm, db.match.rate).where(db.match.event == event).tuples()
        data = list(data)
        csv = ""
        for dp in data:
            csv += str(dp)[1:-1] + "\n"
        return Response(
            csv,
            mimetype="text/csv",
            headers={"Content-disposition": "attachment; filename=dump.csv"})
    else:
        return redirect(url_for('index'))


@app.route('/wipe')
def wipe():
    if valid:
        matches = db.match.delete().where(db.match.event == event)
        matches.execute()  # Returns the number of rows deleted.
        return redirect(url_for('index'))
    else:
        return redirect(url_for('index'))


@app.route('/upload', methods=['POST'])
def upload():
    if valid:
        csv = request.files.get('upload', None)
        print(csv)

        line = csv.readline()
        while line:
            print(line)
            dp = line[:-1].decode("utf-8") .split(",")

            match = db.match(event=dp[0].strip().replace("'", ""), team_no=dp[1].strip().replace("'", ""), scout=dp[2].strip().replace("'", ""), auto_move=dp[3].strip().replace("'", ""),
                             auto_switch_cubes=dp[4].strip().replace("'", ""),
                             auto_scale_cubes=dp[5].strip().replace("'", ""), auto_comm=dp[6].strip().replace("'", ""), match_no=dp[7].strip().replace("'", ""),
                             tele_switch_cubes=dp[8].strip().replace("'", ""), tele_scale_cubes=dp[9].strip().replace("'", ""),
                             hang=dp[10].strip().replace("'", ""), tele_comm=dp[11].strip().replace("'", ""), rate=dp[12].strip().replace("'", ""))
            match.save()

            line = csv.readline()

        csv.close()

    return redirect(url_for('index'))


@app.route('/view')
def view():
    if valid:
        matches = db.match.select(db.match.team_no, db.match.match_no, db.match.scout, db.match.auto_move,
                                  db.match.auto_switch_cubes, db.match.auto_scale_cubes,
                                  db.match.auto_comm, db.match.tele_switch_cubes, db.match.tele_scale_cubes,
                                  db.match.hang, db.match.tele_comm, db.match.rate).where(db.match.event == event)\
            .order_by(db.match.team_no.asc(), db.match.match_no.asc()).tuples()
        matches = list(matches)
        cols = ['Team', 'Match', 'Scout', 'Move', 'Auto Switch', 'Auto Scale', 'Auto Comm', 'Tele Switch', 'Tele Scale', 'Hang', 'Tele Comm', 'Rate']

        return render_template('view.html', cols=cols, matches=matches)
    else:
        return redirect(url_for('index'))


@app.route('/pit')
def pit():
    if valid:
        temp_todo = db.team.select(db.team.team_no, db.team.team_nm).join(db.event_team_xref, JOIN_INNER, (db.event_team_xref.team_no == db.team.team_no) & (db.event_team_xref.event == event))
        temp_todo = list(temp_todo.tuples())

        todo = []
        done = []

        for t in temp_todo:
            exist = db.pit.select().where(db.pit.team_no == t[0])
            exist = list(exist.tuples())

            if len(exist) == 0:
                todo.append(t)
            else:
                done.append(t)

        print(todo)
        print(done)


        return render_template('pit.html', todo=todo, done=done)
    else:
        return redirect(url_for('index'))


@app.route('/pit-scout')
def pit_scout():
    if valid:
        team_no  = request.args.get('team_no', None)

        team = db.team.select().where(db.team.team_no == team_no)
        team = list(team.tuples())[0]

        print(team)

        results = db.pit.select().join(db.event_team_xref, JOIN_INNER,(db.event_team_xref.team_no == team_no) & (db.pit.team_no == db.event_team_xref.team_no) & (db.event_team_xref.event == event))
        try:
            results = list(results.tuples())[0]
        except IndexError:
            results = []


        print(results)


        return render_template('pit_scout.html', team=team, results=results)
    else:
        return redirect(url_for('index'))


@app.route('/pit-submit', methods=['POST'])
def pit_submit():
    if valid:
        team_no = request.form.get('team_no')
        drivetrain = request.form.get('drive-train', "")
        auto = request.form.get('auto', "")
        fast = request.form.get('fast', "")
        pickup = request.form.get('cubes', "")
        scale = request.form.get('scale', False)
        switch = request.form.get('switch', False)
        hang = request.form.get('hang', False)
        climbpart = request.form.get('climb', "")
        defense = request.form.get('defense', False)

        if scale:
            scale = 'y'
        else:
            scale = 'n'

        if switch:
            switch = 'y'
        else:
            switch = 'n'

        if hang:
            hang = 'y'
        else:
            hang = 'n'

        if defense:
            defense = 'y'
        else:
            defense = 'n'

        try:
            pit_res = db.pit.get((db.pit.team_no == team_no) & (db.pit.event == event))
            pit_res.drivetrain = drivetrain
            pit_res.auto = auto
            pit_res.fast = fast
            pit_res.pickup = pickup
            pit_res.scale = scale
            pit_res.switch = switch
            pit_res.hang = hang
            pit_res.climbpart = climbpart
            pit_res.defense = defense

        except DoesNotExist:
            pit_res = db.pit(team_no = team_no, event_id = event, drivetrain = drivetrain, auto = auto, fast = fast, pickup = pickup, scale = scale, switch = switch, hang = hang, climbpart = climbpart, defense = defense)

        pit_res.save()

        return redirect(url_for('pit'))
    else:
        return redirect(url_for('index'))

@app.route('/pit-view')
def pit_view():
    if valid:
        request.args.get('team_no', None)

        return render_template('pit.html', todo=todo, done=done)
    else:
        return redirect(url_for('index'))

if __name__ == '__main__':
    app.run()
